apply plugin: 'io.github.gradle-nexus.publish-plugin'
apply from: file("${rootDir}/gradle/artifact-settings.gradle")

buildscript {
    apply from: "${rootDir}/gradle/dependencies.gradle"

    repositories {
        maven { url 'https://plugins.gradle.org/m2' }
        maven { url 'https://jitpack.io' }
        google()
        mavenCentral()
        jcenter()
    }

    dependencies {
        // Adding CheckStyle dependency without having to declare specific version explicitly here.
        dependencies.create(pluginDependencies.checkstyle) {
            transitive = false
        }

        classpath pluginDependencies.jacoco
        classpath pluginDependencies.gradleNexus
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs += ['-Xlint:all', '-Xlint:unchecked']
}

subprojects {
    apply from: "${rootDir}/gradle/dependencies.gradle"
    apply plugin: 'java'
    apply plugin: 'idea'

    // Fixes issue with test resources not being found inside Intellij
    idea {
        module {
            testOutputDir = file('build/resources/test')
        }
    }

    sourceCompatibility = JavaVersion.VERSION_1_7
    targetCompatibility = JavaVersion.VERSION_1_7

    repositories {
        google()
        mavenCentral()
        jcenter()
    }

    dependencies {
        // Test Dependencies
        testImplementation dependenciesList.junit
        testImplementation dependenciesList.hamcrestJunit
        testImplementation dependenciesList.mockito
    }
}

def TESTABLE_MODULES = ["services-geojson", "services-turf"]
def RELEASE_MODULES = ["services-geojson", "services-turf"]

subprojects { subproject ->
    tasks.withType(Jar) { jarTask ->
        if (!jarTask.name.endsWith("sourcesJar")) {
            jarTask.exclude("**/*.java")
        }
    }

    if (TESTABLE_MODULES.contains(subproject.name)) {
        afterEvaluate { project ->
            project.apply from: "${rootDir}/gradle/jacoco.gradle"
            // project.apply from: "${rootDir}/gradle/checkstyle.gradle"
        }
    }

    if (RELEASE_MODULES.contains(subproject.name)) {
        project.logger.info("Applying gradle publish plugin to ${subproject.name}")
        subproject.apply from: "${rootDir}/gradle/publish.gradle"
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier.set('sources')
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        archiveClassifier.set('javadoc')
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        // archives javadocJar
    }
}

apply from: "${rootDir}/gradle/publish-root.gradle"

defaultTasks('clean', 'build')

nexusPublishing {
    repositories {
        sonatype {
            useStaging = !project.ext.isSnapshot
            stagingProfileId = sonatypeStagingProfileId
            username = ossrhUsername
            password = ossrhPassword
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
        }
    }
}
